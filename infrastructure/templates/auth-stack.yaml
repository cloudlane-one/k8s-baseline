apiVersion: v1
kind: Namespace
metadata:
  name: auth-system
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: dex
  namespace: flux-system
spec:
  interval: 1h
  url: https://charts.dexidp.io
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: dex
  namespace: auth-system
spec:
  interval: 1h
  chart:
    spec:
      chart: dex
      version: "^0"
      sourceRef:
        kind: HelmRepository
        name: dex
        namespace: flux-system
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    rbac:
      createClusterScoped: false
    envVars:
      - name: IDP_CLIENT_ID
        value: {{ .Values.admin.idp.clientID | quote }}
      - name: IDP_CLIENT_SECRET
        value: {{ .Values.admin.idp.clientSecret | quote }}
    serviceMonitor:
      enabled: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme
      hosts:
        - host: {{ include "get_hostname" (dict "service" "dex" "context" $) }}
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - {{ include "get_hostname" (dict "service" "dex" "context" $) }}
          secretName: dex-cert
    config:
      # See https://dexidp.io/docs/storage/ for more options
      storage:
        type: memory
      issuer: {{ printf "https://%s" (include "get_hostname" (dict "service" "dex" "context" $)) }}
      connectors:     
        - type: {{ .Values.admin.idp.type }}
          id: {{ printf "adminIDP-%s" .Values.admin.idp.type }}
          name: {{ printf "adminIDP-%s" .Values.admin.idp.type }}
          config:
            # Credentials can be string literals or pulled from the environment.
            clientID: $IDP_CLIENT_ID
            clientSecret: $IDP_CLIENT_SECRET
            redirectURI: {{ printf "https://%s/callback" (include "get_hostname" (dict "service" "dex" "context" $)) }}
            # flag which will switch from using the internal GitHub id to the users handle (@mention) as the user id.
            # It is possible for a user to change their own user name but it is very rare for them to do so
            {{ if eq .Values.admin.idp.type "github" -}}
            useLoginAsID: true
            loadAllGroups: true
            {{- else if eq .Values.admin.idp.type "oidc" -}}
            issuerURL: {{ .Values.admin.idp.issuerURL }}
            scopes:
              - profile
              - email
              - groups
            {{- end }}
      staticClients:
        - id: admin-oidc
          secret: {{ .Values.clusterSecret | quote }}
          name: "Admin OIDC"
          redirectURIs: 
            - http://localhost:8000 # For kubelogin
            - http://localhost:18000 # For kubelogin
            - {{ printf "https://%s/oauth2/callback" (include "get_hostname" (dict "service" "oauth2_proxy" "context" $)) }}
            - {{ printf "https://%s/oauth2/callback" (include "get_hostname" (dict "service" "weave_gitops" "context" $)) }}
      oauth2:
        skipApprovalScreen: true
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: oauth2-proxy
  namespace: flux-system
spec:
  interval: 1h
  url: https://oauth2-proxy.github.io/manifests
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: oauth2-proxy
  namespace: auth-system
spec:
  dependsOn:
    - name: dex
  interval: 1h
  chart:
    spec:
      chart: oauth2-proxy
      version: "^6"
      sourceRef:
        kind: HelmRepository
        name: oauth2-proxy
        namespace: flux-system
  values:
    config:
      clientID: admin-oidc
      clientSecret: {{ .Values.clusterSecret | quote }}
      cookieSecret: {{ (substr 0 16 .Values.clusterSecret) | quote }}
      configFile: |-
        upstreams = "file:///dev/null"
        whitelist_domains = [ {{ printf ".%s" .Values.domain | quote }} ]
        provider = "oidc"
        provider_display_name = {{ printf "SSO for %s" .Values.domain | quote }}
        oidc_issuer_url = {{ printf "https://%s" (include "get_hostname" (dict "service" "dex" "context" $)) | quote }}
        redirect_url = {{ printf "https://%s/oauth2/callback" (include "get_hostname" (dict "service" "oauth2_proxy" "context" $)) | quote }}
        set_xauthrequest = true
        set_authorization_header = true
        pass_authorization_header = true
        pass_access_token = true
        cookie_samesite = "none"
        cookie_domains = [ {{ printf ".%s" .Values.domain | quote }} ]
        cookie_refresh = "300s"
        email_domains = "*"
        scope = "email groups profile openid"
        allowed_groups = [ {{ .Values.admin.group | quote }} ]
        {{ if .Values.letsencrypt_staging -}}
        ssl_insecure_skip_verify = true
        {{- end }}
    # -> see https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview#config-file
    # and https://dexidp.io/docs/custom-scopes-claims-clients/#scopes
    # and https://dexidp.io/docs/custom-scopes-claims-clients/#cross-client-trust-and-authorized-party
    metrics:
      enabled: true
      servicemonitor:
        enabled: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme
      hosts:
        - {{ include "get_hostname" (dict "service" "oauth2_proxy" "context" $) }}
      tls:
        - hosts:
            - {{ include "get_hostname" (dict "service" "oauth2_proxy" "context" $) }}
          secretName: oauth2-proxy-cert
