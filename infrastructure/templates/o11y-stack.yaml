apiVersion: v1
kind: Namespace
metadata:
  name: o11y-system
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: prometheus-community
  namespace: flux-system
spec:
  interval: 1h
  url: https://prometheus-community.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: o11y-system
spec:
  interval: 1h
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "^40"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    prometheusOperator:
      admissionWebhooks:
        timeoutSeconds: 30 # Prevent timeouts during helm upgrade
    prometheus:
      prometheusSpec:
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 8Gi
    grafana:
      adminPassword: {{ .Values.clusterSecret | quote }}
      grafana.ini:
        server:
          root_url: {{ printf "https://%s" (include "get_hostname" (dict "service" "grafana" "context" $)) }}
        auth:
          oauth_auto_login: true
          disable_login_form: true
        auth.generic_oauth:
          # See: https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/generic-oauth/
          enabled: true
          name: Admin OIDC
          client_id: admin-oidc
          client_secret: {{ .Values.clusterSecret | quote }}
          scopes: openid,profile,email,groups
          auth_url: {{ printf "https://%s/auth" (include "get_hostname" (dict "service" "dex" "context" $)) | quote }}
          token_url: {{ printf "https://%s/token" (include "get_hostname" (dict "service" "dex" "context" $)) | quote }}
          api_url: {{ printf "https://%s/userinfo" (include "get_hostname" (dict "service" "dex" "context" $)) | quote }}
          allow_sign_up: true
          allowed_groups: {{ .Values.admin.group | quote }}
          role_attribute_path: "contains(groups[*], {{ .Values.admin.group | squote }}) && 'Admin' || 'Viewer'"
      additionalDataSources:
        - name: loki
          access: proxy
          editable: false
          jsonData:
            tlsSkipVerify: true
          type: loki
          url: http://loki-stack.o11y-system:3100
          version: 1
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: acme
        hosts:
          - {{ include "get_hostname" (dict "service" "grafana" "context" $) }}
        tls:
          - hosts:
              - {{ include "get_hostname" (dict "service" "grafana" "context" $) }}
            secretName: grafana-cert
      persistence:
        enabled: true
    alertmanager:
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 8Gi
      ingress:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: acme
          {{ include "admin_auth_annotations" . | nindent 10 }}
        hosts:
          - {{ include "get_hostname" (dict "service" "alertmanager" "context" $) }}
        tls:
          - hosts:
              - {{ include "get_hostname" (dict "service" "alertmanager" "context" $) }}
            secretName: alertmanager-cert
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: grafana
  namespace: flux-system
spec:
  interval: 1h
  url: https://grafana.github.io/helm-charts
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: loki-stack
  namespace: o11y-system
spec:
  interval: 1h
  chart:
    spec:
      chart: loki-stack
      version: "^2"
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  values:
    loki:
      config:
        schema_config:
          configs:
          - from: "2022-12-30"
            store: boltdb-shipper
            object_store: s3
            schema: v11
            index:
              prefix: index_
              period: 24h
        ruler:
          storage:
            type: local
            local:
              directory: /tmp/rules
          rule_path: /tmp/scratch
          alertmanager_url: http://kube-prometheus-stack-alertmanager.o11y-system:9093
          ring:
            kvstore:
              store: inmemory
          enable_api: true
        storage_config:
          aws:
            # https://grafana.com/docs/loki/latest/configuration/#s3_storage_config
            s3: {{ printf "https://%s" .Values.s3.endpoint }}
            bucketnames: {{ .Values.s3.buckets.loki.chunks }}
            endpoint: {{ .Values.s3.endpoint }}
            region: {{ .Values.s3.region }}
            access_key_id: {{ .Values.s3.access_key.id | quote }}
            secret_access_key: {{ .Values.s3.access_key.secret | quote }}
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: kubernetes-dashboard
  namespace: flux-system
spec:
  interval: 1h
  url: https://kubernetes.github.io/dashboard
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kubernetes-dashboard
  namespace: o11y-system
spec:
  interval: 1h
  chart:
    spec:
      chart: kubernetes-dashboard
      version: "^5"
      sourceRef:
        kind: HelmRepository
        name: kubernetes-dashboard
        namespace: flux-system
  values:
    metricsScraper:
      enabled: true
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: acme
        {{ include "admin_auth_annotations" . | nindent 8 }}
      hosts:
        - {{ include "get_hostname" (dict "service" "k8s_dashboard" "context" $) }}
      tls:
        - hosts:
            - {{ include "get_hostname" (dict "service" "k8s_dashboard" "context" $) }}
          secretName: k8s-dashboard-cert
---